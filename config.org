*Emacs Configuration*


* General Configuration
** Remove help from start up page

#+BEGIN_SRC emacs-lisp

(setq inhibit-startup-message t)

#+END_SRC

** Remove Tool Bar

   #+BEGIN_SRC emacs-lisp

(tool-bar-mode -1)
   
   #+END_SRC
** Get Y or N Questions

#+BEGIN_SRC emacs-lisp

(defalias 'yes-or-no-p 'y-or-n-p)

#+END_SRC

** Deactivate Bell Ring

#+BEGIN_SRC emacs-lisp

(setq ring-bell-function 'ignore)

#+END_SRC

** Remove last line scroll jump
   

#+BEGIN_SRC emacs-lisp

  (setq scroll-conservatively 100)

#+END_SRC

** Config Edit/Reload
*** Edit
#+BEGIN_SRC emacs-lisp

  (defun config-visit ()
    (interactive)
    (find-file my-config-file-location))

  (global-set-key (kbd "C-c e") 'config-visit)

#+END_SRC
*** Reload
#+BEGIN_SRC emacs-lisp

  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name my-config-file-location)))

  (global-set-key (kbd "C-c r") 'config-reload)

#+END_SRC
** Window Splitting Function
Move current cursor to new window
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC
** Recently Opened Files
#+BEGIN_SRC emacs-lisp

(recentf-mode 1)
(global-set-key (kbd "<f7>") 'recentf-open-files)

#+END_SRC
* DIRED
** dired-x
#+BEGIN_SRC emacs-lisp

(require 'dired-x)

#+END_SRC
** Split Window Copying
#+BEGIN_SRC emacs-lisp
(setq dired-dwim-target t)
#+END_SRC
* ANSI Term

#+BEGIN_SRC emacs-lisp

  (defvar my-term-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)

  (global-set-key (kbd "<s-return>") 'ansi-term)

#+END_SRC

* Packages
** org-bullets
#+BEGIN_SRC emacs-lisp

  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))

#+END_SRC
** which-key
#+BEGIN_SRC emacs-lisp

(use-package which-key
  :ensure t
  :init
  (which-key-mode))

#+END_SRC

** beacon

#+BEGIN_SRC emacs-lisp

(use-package beacon
  :ensure t
  :init
  (beacon-mode 1))

#+END_SRC
** IDO 

#+BEGIN_SRC emacs-lisp

  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-eveywhere t)
  (ido-mode 1)

#+END_SRC

*** ido-vertical

#+BEGIN_SRC emacs-lisp

  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))

  (setq ido-vertical-define-keys 'C-n-and-C-p-only)

#+END_SRC

** smex

#+BEGIN_SRC emacs-lisp

  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex))

#+END_SRC

** ibuffer

#+BEGIN_SRC emacs-lisp

  (global-set-key (kbd "C-x C-b") 'ibuffer)

#+END_SRC

** avy


#+Begin_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+END_SRC
** Switch-window

#+BEGIN_SRC emacs-lisp

  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threashold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
	  '("a" "s" "d" "f" "h" "j" "k" "l"))
    :bind
    ([remap other-window] . switch-window))

#+END_SRC
